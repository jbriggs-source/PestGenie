name: iOS Build and Test

on:
  push:
    branches: [ main, develop, release/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - archive
        - release

env:
  XCODE_VERSION: '16.2'
  IOS_SIMULATOR: 'iPhone 15 Pro'
  IOS_VERSION: '18.2'

jobs:
  test:
    name: Run Tests
    runs-on: macos-14
    if: github.event_name == 'pull_request' || github.event.inputs.build_type == 'test'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Cache derived data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-

    - name: Install dependencies
      run: |
        xcodebuild -resolvePackageDependencies -project PestGenie.xcodeproj

    - name: Run unit tests
      run: |
        xcodebuild test \
          -project PestGenie.xcodeproj \
          -scheme PestGenie \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
          -resultBundlePath TestResults.xcresult \
          -enableCodeCoverage YES

    - name: Run UI tests
      run: |
        xcodebuild test \
          -project PestGenie.xcodeproj \
          -scheme PestGenie \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
          -only-testing:PestGenieUITests \
          -resultBundlePath UITestResults.xcresult

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          TestResults.xcresult
          UITestResults.xcresult

    - name: Generate code coverage report
      run: |
        xcrun xccov view --report --json TestResults.xcresult > coverage.json

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage.json
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build App
    runs-on: macos-14
    if: github.ref == 'refs/heads/main' || github.event.inputs.build_type == 'archive'
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

    - name: Cache derived data
      uses: actions/cache@v4
      with:
        path: ~/Library/Developer/Xcode/DerivedData
        key: ${{ runner.os }}-derived-data-${{ hashFiles('**/*.swift') }}
        restore-keys: |
          ${{ runner.os }}-derived-data-

    - name: Install dependencies
      run: |
        xcodebuild -resolvePackageDependencies -project PestGenie.xcodeproj

    - name: Build for iOS Simulator
      run: |
        xcodebuild build \
          -project PestGenie.xcodeproj \
          -scheme PestGenie \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
          -configuration Debug

    - name: Build for iOS Device
      run: |
        xcodebuild build \
          -project PestGenie.xcodeproj \
          -scheme PestGenie \
          -destination "generic/platform=iOS" \
          -configuration Release \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO

    - name: Archive for distribution
      if: github.ref == 'refs/heads/main'
      run: |
        xcodebuild archive \
          -project PestGenie.xcodeproj \
          -scheme PestGenie \
          -destination "generic/platform=iOS" \
          -configuration Release \
          -archivePath PestGenie.xcarchive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          PestGenie.xcarchive
          build/

  security-scan:
    name: Security Scan
    runs-on: macos-14
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      run: |
        # Install security scanning tools
        brew install semgrep
        
        # Run security scan
        semgrep --config=auto --json --output=semgrep-results.json .
        
        # Check for high severity issues
        if grep -q '"severity": "ERROR"' semgrep-results.json; then
          echo "High severity security issues found"
          exit 1
        fi

    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-results
        path: semgrep-results.json

  performance-test:
    name: Performance Tests
    runs-on: macos-14
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Select Xcode version
      run: sudo xcode-select -s /Applications/Xcode_${{ env.XCODE_VERSION }}.app/Contents/Developer

    - name: Run performance tests
      run: |
        xcodebuild test \
          -project PestGenie.xcodeproj \
          -scheme PestGenie \
          -destination "platform=iOS Simulator,name=${{ env.IOS_SIMULATOR }},OS=${{ env.IOS_VERSION }}" \
          -only-testing:PestGenieTests/PerformanceTests \
          -resultBundlePath PerformanceTestResults.xcresult

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      with:
        name: performance-test-results
        path: PerformanceTestResults.xcresult

  release:
    name: Create Release
    runs-on: macos-14
    if: github.event.inputs.build_type == 'release' && github.ref == 'refs/heads/main'
    needs: [test, build, security-scan, performance-test]
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: artifacts/

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ github.run_number }}
        name: PestGenie v${{ github.run_number }}
        body: |
          ## PestGenie Release v${{ github.run_number }}
          
          ### Changes
          - Automated build from main branch
          - All tests passing
          - Security scan completed
          - Performance tests passed
          
          ### Downloads
          - iOS Archive: PestGenie.xcarchive
        files: artifacts/*
        draft: false
        prerelease: false
